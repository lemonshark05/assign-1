f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _t2:int, _t3:int, _t4:int, _t5:int, id0:int
bb1:
  $ret _lo1

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

entry:
  id0 = $copy id0
  id0 = $copy 4
  _t2 = $call_ext e1()
  id0 = $copy _t2
  _t3 = $call_ext e1()
  _t4 = $call_ext e2(_t3)
  _t5 = $arith div 5 _t4
  $branch _t5 bb2 bb3
}