test:&(int, int) -> int

fn main() -> int {
entry:
  $ret 0
}

fn test(p:int, q:int) -> int {
let _lo1:int, _lo2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int
bb1:
  $jump bb4

bb10:
  _t4 = $arith sub 0 4
  _t5 = $arith sub 0 _t4
  _t6 = $arith sub 0 id1
  _t7 = $arith div _lo2 _t6
  _t8 = $cmp gt _t5 _t7
  id1 = $copy _t8
  q = $copy 9
  q = $copy 7
  _t9 = $arith sub 0 8
  $ret _t9

bb11:
  _lo2 = $copy 0
  $jump bb10

bb12:
  _lo2 = $copy 1
  $jump bb10

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

bb4:
  $branch _lo1 bb5 bb6

bb5:
  id0 = $copy 4
  id1 = $copy id2
  p = $copy p
  id1 = $copy q
  $branch q bb8 bb9

bb6:
  id2 = $copy 9
  $branch id2 bb11 bb12

bb7:
  $jump bb4

bb8:
  _lo1 = $copy 0
  $jump bb7

bb9:
  _lo1 = $copy 1
  $jump bb7

entry:
  _t3 = $arith sub 0 id1
  id0 = $copy _t3
  $branch q bb2 bb3
}