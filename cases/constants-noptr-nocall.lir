test:&(int, int) -> int

fn main() -> int {
entry:
  $ret 0
}

fn test(p:int, q:int) -> int {
let _lo1:int, _lo2:int, _lo3:int, _lo4:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int
bb1:
  _lo1 = $copy _lo2
  _t5 = $cmp neq _lo1 0
  $branch _t5 bb5 bb4

bb10:
  _t17 = $arith sub 0 7
  _t18 = $arith sub 0 _t17
  $branch _t18 bb12 bb13

bb11:
  $ret _lo4

bb12:
  _lo4 = $copy 0
  $jump bb11

bb13:
  _lo4 = $copy 1
  $jump bb11

bb2:
  _lo2 = $copy 0
  $jump bb1

bb3:
  _lo2 = $copy 1
  $jump bb1

bb4:
  _t6 = $arith sub 0 6
  _lo3 = $copy _t6
  _t7 = $cmp eq _lo3 0
  $branch _t7 bb7 bb6

bb5:
  _lo1 = $copy 0
  $jump bb4

bb6:
  _t8 = $cmp lte id0 _lo3
  _t9 = $cmp gt _lo1 _t8
  id2 = $copy _t9
  _t10 = $arith sub 0 6
  id0 = $copy _t10
  id1 = $copy id2
  $jump bb8

bb7:
  _lo3 = $copy 0
  $jump bb6

bb8:
  $branch p bb9 bb10

bb9:
  _t11 = $arith sub 0 9
  _t12 = $arith sub 0 4
  _t13 = $arith sub _t11 _t12
  _t14 = $cmp lt id2 _t13
  id1 = $copy _t14
  _t15 = $arith sub 0 3
  id2 = $copy _t15
  _t16 = $arith sub 0 q
  p = $copy _t16
  $jump bb8

entry:
  id1 = $copy 3
  $branch q bb2 bb3
}