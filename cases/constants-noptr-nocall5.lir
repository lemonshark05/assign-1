test:&(int, int) -> int

fn main() -> int {
entry:
  $ret 0
}

fn test(p:int, q:int) -> int {
let _lo1:int, _lo2:int, _lo3:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int
bb1:
  $branch _lo1 bb4 bb5

bb2:
  _lo1 = $copy 9
  $jump bb1

bb3:
  _t7 = $arith sub 0 6
  _t8 = $cmp neq _t7 id0
  _t9 = $arith sub 0 10
  _t10 = $arith mul _t9 q
  _t11 = $cmp gte _t8 _t10
  _t12 = $cmp eq _lo2 _t11
  id0 = $copy _t12
  _t13 = $arith sub 0 5
  _t14 = $cmp gt _t13 1
  _t15 = $cmp gte _t14 3
  _t16 = $arith mul _t15 id1
  q = $copy _t16
  $branch 4 bb7 bb8

bb4:
  _lo2 = $copy 0
  $jump bb3

bb5:
  _lo2 = $copy 1
  $jump bb3

bb6:
  id2 = $copy _lo3
  _t17 = $arith sub 0 0
  q = $copy _t17
  _t18 = $cmp eq id0 id2
  $ret _t18

bb7:
  _lo3 = $copy 0
  $jump bb6

bb8:
  _lo3 = $copy 1
  $jump bb6

entry:
  _t4 = $arith sub 0 10
  id0 = $copy _t4
  id1 = $copy p
  _t5 = $arith sub 0 10
  _lo1 = $copy _t5
  _t6 = $cmp eq _lo1 0
  $branch _t6 bb2 bb1
}