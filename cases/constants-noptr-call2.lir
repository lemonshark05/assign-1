f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _t1:int, _t2:int, id0:int
bb1:
  $branch id0 bb2 bb3

bb2:
  $jump bb1

bb3:
  _t1 = $call_dir f1() then bb4

bb4:
  id0 = $copy _t1
  $call_ext e1()
  _t2 = $arith sub 0 8
  $ret _t2

entry:
  id0 = $copy id0
  $jump bb1
}